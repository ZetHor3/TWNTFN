// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const axios = require('axios');
const dotenv = require('dotenv');
const fs = require('fs');
dotenv.config();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Twitch API
const CLIENT_ID = process.env.TWITCH_CLIENT_ID;
const CLIENT_SECRET = process.env.TWITCH_CLIENT_SECRET;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Telegram API
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

let ACCESS_TOKEN = '';
const isStreaming = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message) {
    try {
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
        });
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
async function getAccessToken() {
    const response = await axios.post('https://id.twitch.tv/oauth2/token', null, {
        params: {
            client_id: CLIENT_ID,
            client_secret: CLIENT_SECRET,
            grant_type: 'client_credentials',
        },
    });
    ACCESS_TOKEN = response.data.access_token;
}

async function checkStreamersStatus() {
    try {
        // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        const streamers = fs
            .readFileSync('streamers.txt', 'utf8')
            .split('\n')
            .map(name => name.trim())
            .filter(name => name);

        console.log('–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', streamers);

        for (const streamer of streamers) {
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∏–º–µ—Ä–∞:', streamer);

            const userResponse = await axios.get(`https://api.twitch.tv/helix/users`, {
                headers: {
                    'Client-ID': CLIENT_ID,
                    Authorization: `Bearer ${ACCESS_TOKEN}`,
                },
                params: {
                    login: streamer,
                },
            });

            if (userResponse.data.data.length === 0) {
                console.log(`–°—Ç—Ä–∏–º–µ—Ä ${streamer} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                continue;
            }

            const userId = userResponse.data.data[0].id;

            const streamResponse = await axios.get(`https://api.twitch.tv/helix/streams`, {
                headers: {
                    'Client-ID': CLIENT_ID,
                    Authorization: `Bearer ${ACCESS_TOKEN}`,
                },
                params: {
                    user_id: userId,
                },
            });

            const isLive = streamResponse.data.data.length > 0;

            if (isLive && !isStreaming.get(streamer)) {
                const streamData = streamResponse.data.data[0];
                const title = streamData.title; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∏–º–∞
                const url = `https://www.twitch.tv/${streamer}`; // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º

                const message = `${streamer} –Ω–∞—á–∞–ª —Å—Ç—Ä–∏–º!\n\nüé• ${title}\nüîó (${url})`;
                console.log(message);

                await sendTelegramMessage(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
                isStreaming.set(streamer, true);
            } else if (!isLive && isStreaming.get(streamer)) {
                console.log(`${streamer} –Ω–µ —Å—Ç—Ä–∏–º–∏—Ç.`);
                isStreaming.set(streamer, false); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤:', error.message);
        if (error.response && error.response.status === 401) {
            console.log('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...');
            await getAccessToken();
        }
    }
}


// –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
(async () => {
    await getAccessToken();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–µ—Ä–æ–≤.');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(checkStreamersStatus, 5000);
})();
